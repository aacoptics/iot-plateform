{"version":3,"sources":["webpack:///./src/api/iot/lenspacker.js","webpack:///./src/views/lenspacker/LensPackerCapacityPage.vue","webpack:///./src/views/lenspacker/LensPackerCapacityPage.vue?2225"],"names":["getAlarmDetail","startTime","endTime","machineName","request","url","method","headers","params","getAlarmCount","getMachineList","getMachineCapacity","getMachineStatus","getMachineAlarms","getLensPackerStatusCount","class","separator","style","dateTimePickerValue","type","shortcuts","range-separator","start-placeholder","end-placeholder","size","icon","getLensPackerCapacityData","exportExcel","span","data","lensPackerCapacity","stripe","border","id","height","prop","label","capacityLoading","name","text","value","end","Date","start","setTime","getTime","methods","tableId","excelFileName","wb","utils","table_to_book","document","querySelector","wbOut","write","bookType","bookSST","saveAs","Blob","e","console","log","this","length","$message","error","$moment","format","then","response","responseData","code","catch","render","__scopeId"],"mappings":"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","file":"js/chunk-2385e518.dd047f54.js","sourcesContent":["import request from '@/utils/request'\n\nexport function getAlarmDetail(startTime, endTime, machineName) {\n    return request({\n        url: '/lenspacker/lenspackerDashboard/getAlarmDetail',\n        method: 'get',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        params: {\n            startTime: startTime,\n            endTime: endTime,\n            machineName: machineName\n        }\n    })\n}\n\nexport function getAlarmCount(startTime, endTime, machineName) {\n    return request({\n        url: '/lenspacker/lenspackerDashboard/getAlarmCount',\n        method: 'get',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        params: {\n            startTime: startTime,\n            endTime: endTime,\n            machineName: machineName\n        }\n\n    })\n}\n\nexport function getMachineList() {\n    return request({\n        url: '/lenspacker/lenspackerDashboard/getMachineList',\n        method: 'get',\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    })\n}\n\nexport function getMachineCapacity(startTime, endTime) {\n    return request({\n        url: '/lenspacker/lenspackerDashboard/getMachineCapacity',\n        method: 'get',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        params: {\n            startTime: startTime,\n            endTime: endTime\n        }\n    })\n}\n\nexport function getMachineStatus() {\n    return request({\n        url: '/lenspacker/lenspackerDashboard/getAllStatus',\n        method: 'get',\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    })\n}\n\nexport function getMachineAlarms() {\n    return request({\n        url: '/lenspacker/lenspackerDashboard/getCurrentAlarm',\n        method: 'get',\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    })\n}\n\nexport function getLensPackerStatusCount() {\n    return request({\n        url: '/lenspacker/lenspackerDashboard/getStatusCount',\n        method: 'get',\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    })\n}\n","<template>\r\n  <div>\r\n    <div class=\"crumbs\">\r\n      <el-breadcrumb separator=\"/\">\r\n        <el-breadcrumb-item>\r\n          <i class=\"el-icon-lx-calendar\"></i> 包料机监控\r\n        </el-breadcrumb-item>\r\n        <el-breadcrumb-item>包料机报警数据</el-breadcrumb-item>\r\n      </el-breadcrumb>\r\n    </div>\r\n    <div class=\"container\">\r\n      <el-row style=\"margin-bottom: 20px\">\r\n        <el-date-picker\r\n            v-model=\"dateTimePickerValue\"\r\n            type=\"datetimerange\"\r\n            :shortcuts=\"shortcuts\"\r\n            range-separator=\"至\"\r\n            start-placeholder=\"开始日期\"\r\n            end-placeholder=\"结束日期\"\r\n            size=\"large\">\r\n        </el-date-picker>\r\n        <el-button type=\"primary\" icon=\"el-icon-search\" size=\"large\" style=\"margin-left: 10px\"\r\n                   @click=\"getLensPackerCapacityData\">查询\r\n        </el-button>\r\n        <el-button type=\"success\" icon=\"el-icon-download\" size=\"large\"\r\n                   @click=\"exportExcel('#capacityTable', 'CapacityData.xlsx')\">导出\r\n        </el-button>\r\n      </el-row>\r\n      <el-row>\r\n        <el-col :span=\"24\">\r\n          <el-table\r\n              :data=\"lensPackerCapacity\"\r\n              stripe\r\n              border\r\n              id=\"capacityTable\"\r\n              style=\"width: 95%\"\r\n              height=\"600\"\r\n              v-loading=\"capacityLoading\">\r\n            <el-table-column\r\n                prop=\"machineName\"\r\n                label=\"机台号\">\r\n            </el-table-column>\r\n            <el-table-column\r\n                prop=\"capacity\"\r\n                label=\"产能\">\r\n            </el-table-column>\r\n          </el-table>\r\n        </el-col>\r\n      </el-row>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport XLSX from \"xlsx\";\r\nimport FileSaver from 'file-saver'\r\nimport {getMachineCapacity} from \"@/api/iot/lenspacker\";\r\n\r\nexport default {\r\n  name: \"LensPackerAlarmPage\",\r\n  data() {\r\n    return {\r\n      capacityLoading: false,\r\n      dateTimePickerValue: [],\r\n      shortcuts: [{\r\n        text: '最近一天',\r\n        value: (() => {\r\n          const end = new Date();\r\n          const start = new Date();\r\n          start.setTime(start.getTime() - 3600 * 1000 * 24);\r\n          return [start, end]\r\n        })()\r\n      }],\r\n      lensPackerCapacity: [],\r\n    }\r\n  },\r\n  methods: {\r\n    exportExcel(tableId, excelFileName) {\r\n      const wb = XLSX.utils.table_to_book(document.querySelector(tableId));\r\n      const wbOut = XLSX.write(wb, {bookType: 'xlsx', bookSST: true, type: 'array'});\r\n      try {\r\n        FileSaver.saveAs(new Blob([wbOut], {type: 'application/octet-stream'}), excelFileName)\r\n      } catch (e) {\r\n        if (typeof console !== 'undefined') console.log(e, wbOut)\r\n      }\r\n      return wbOut\r\n    },\r\n    getLensPackerCapacityData() {\r\n      this.capacityLoading = true\r\n      if (this.dateTimePickerValue.length !== 2) {\r\n        this.$message.error(\"请选择查询时间段\");\r\n      } else {\r\n        const startTime = this.$moment(this.dateTimePickerValue[0]).format('YYYY-MM-DD HH:mm:ss');\r\n        const endTime = this.$moment(this.dateTimePickerValue[1]).format('YYYY-MM-DD HH:mm:ss');\r\n        getMachineCapacity(startTime, endTime).then((response) => {\r\n          const responseData = response.data\r\n          if (responseData.code === '000000') {\r\n            this.lensPackerCapacity = responseData.data;\r\n          }\r\n          this.capacityLoading = false\r\n        }).catch(() => {\r\n          this.capacityLoading = false\r\n        })\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n","import { render } from \"./LensPackerCapacityPage.vue?vue&type=template&id=76207973&scoped=true\"\nimport script from \"./LensPackerCapacityPage.vue?vue&type=script&lang=js\"\nexport * from \"./LensPackerCapacityPage.vue?vue&type=script&lang=js\"\nscript.render = render\nscript.__scopeId = \"data-v-76207973\"\n\nexport default script"],"sourceRoot":""}